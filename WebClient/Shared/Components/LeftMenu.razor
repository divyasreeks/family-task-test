@using Core.Extensions.ModelConversion
@using Domain.ClientSideModels
@using Domain.ViewModel

@inherits LayoutComponentBase


@namespace WebClient.Shared.Components

@inject WebClient.Abstractions.IMemberDataService memberService
@inject WebClient.Abstractions.ITaskDataService taskService
@inject NavigationManager NavManager

<style>
    .dropzone {
        padding: 30px;
        border: 1px dashed #75868a;
        list-style: none;
    }

    .no-drop {
        border: 2px dashed red;
    }

    .can-drop {
        border: 2px dashed green;
    }

    .menu-wrapper {
        background: #FBFBFB;
        box-shadow: 2px 0px 4px 2px rgba(0, 0, 0, 0.12);
        overflow-y: auto;
        height: 100%;
    }

        .menu-wrapper .menu-item {
            background: #FFFFFF;
            box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.12);
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            border: 3px solid #FFFFFF;
        }

            .menu-wrapper .menu-item.active {
                border: 3px solid #CC1778;
            }

        .menu-wrapper .add-menu-item {
            border: 1px dashed #000000;
            box-sizing: border-box;
            filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.12));
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

    .add-menu-item .fa {
        font-size: 12px;
    }

    .menu-wrapper .label {
        color: #000000;
        font-family: "Poppins Regular";
        font-size: 24px;
        line-height: 36px;
    }

    .menu-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .menu-wrapper .label {
            font-size: 16px;
            line-height: 24px;
        }

        .menu-wrapper .avtar {
            width: 24px;
            height: 24px;
        }
    }

    @@media(max-width: 767.98px) {
        .menu-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
</style>

<div class="menu-wrapper col-12 p-0">
    @if (MenuItems != null && MenuItems.Count > 0)
    {
        @foreach (var item in MenuItems)
        {
            if (item.label == "All Tasks")
            {
                <div class="menu-item col-10 offset-1 p-3 my-4 p-sm-2 label" @onclick="@onAllTaskClick">
                    All Tasks
                </div>
            }
            else
            {
                <div class="menu-item col-10 offset-1 p-3 my-4 p-sm-2 dropzone @dropClass @(item.isActive ? "active" : "")" 
                     @onclick="@(e => SelectMember(item.referenceId))"  ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="@(e=> HandleDrop(item.referenceId))"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">
                    @if (item.iconColor != null)
                    {
                        <div class="avtar mr-3" style="background-color: @(item.iconColor);"> </div>
                    }
                    <div class="label"> @item.label </div>
                </div>
            }
        }
    }

    <div class="add-menu-item label col-10 offset-1 p-3 my-4 p-sm-2" @onclick="@OnAddItem">
        <span class="fa fa-plus"></span> &nbsp; Add Member
    </div>
</div>

@code {
    private IEnumerable<TaskVm> tasks;
    string dropClass = "";

    protected override Task OnInitializedAsync()
    {
        MenuItems = new List<MenuItem> { new MenuItem() { label = "All Tasks" } };
        MenuItems.AddRange(memberService.Members.ToMenuItems());
        memberService.MembersChanged += MemberServiceOnMembersChanged;
        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;

        if (memberService.SelectedMember != null)
        {
            SetActiveItem(memberService.SelectedMember.Id);
        }

        return base.OnInitializedAsync();
    }

    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        InactivateAllItems();
        if (memberService.SelectedMember != null)
            SetActiveItem(memberService.SelectedMember.Id);
        StateHasChanged();
    }

    private void MemberServiceOnMembersChanged(object sender, EventArgs e)
    {
        MenuItems.Clear();
        MenuItems.Add(new MenuItem() { label = "All Tasks" });
        MenuItems.AddRange(memberService.Members.ToMenuItems());
        StateHasChanged();
    }

    public List<MenuItem> MenuItems { get; set; }

    private void InactivateAllItems()
    {
        foreach (var menuItem in MenuItems)
        {
            menuItem.isActive = false;
        }
    }

    private void SetActiveItem(Guid id)
    {
        foreach (var menuItem in MenuItems)
        {
            if (menuItem.referenceId == id)
            {
                menuItem.isActive = true;
            }
        }
    }

    void SelectMember(Guid id)
    {
        memberService.SelectMember(id);
    }

    private void OnAddItem()
    {
        memberService.SelectNullMember();
        NavManager.NavigateTo("/members");
    }

    private void onAllTaskClick()
    {
        taskService.LoadAllTasks();
        memberService.SelectNullMember();
        NavManager.NavigateTo("/manage-tasks");

    }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop(Guid id)
    {
        dropClass = "";
        taskService.SelectedTask.AssignedMemberId = id;
        await taskService.UpdateTask(taskService.SelectedTask);
        return;
    }


}
